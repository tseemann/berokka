#!/usr/bin/env perl
use strict;
use FindBin;
use Bio::SeqIO;
use Bio::SearchIO;
use Data::Dumper;
use File::Spec;
use File::Path qw(make_path);
use File::Temp qw(tempfile tempdir);
use List::Util qw(min max);
use File::Basename;
use Cwd qw(realpath getcwd);

# Globals
my $EXE = basename($0);
my $VERSION = "0.2.2";
my $URL = "https://github.com/tseemann/berokka";
my $AUTHOR = 'Torsten Seemann';
my $APPDIR = realpath( "$FindBin::RealBin/.." );
my @DEP_EXE = (qw[blastn]);
my @DEP_FILE = (qw[dnaA.fna controls.fna]); # in $APPDIR/db/

# Options
my(@Options, $debug, $version, $force, $check, $test, $fuzz,
             $outdir, $readlen, $keepfiles, $noanno, $filter);
setOptions();

# Check options
check_deps(1) if $check;
@ARGV or err("Please provide FASTA contig file(s)");
my @FASTA = map { File::Spec->rel2abs($_) } @ARGV;
$outdir or err("Please specify the output folder with --outdir");
check_deps();

# Make output folder
make_folder($outdir);
$outdir = File::Spec->rel2abs($outdir);

#msg("Changing into folder: $outdir");
my $cwd = getcwd();
chdir($outdir);

my $fout1 = Bio::SeqIO->new(-file=>">01.input.fa", -format=>'fasta');
my $fout2 = Bio::SeqIO->new(-file=>">02.trimmed.fa", -format=>'fasta');
open my $log, '>', "03.results.tab";
print $log "#sequence\tstatus\told_len\tnew_len\ttrimmed\n";
my $nseq=0;
for my $fname (@FASTA) {
  my $fasta = Bio::SeqIO->new(-file=>$fname, -format=>'fasta');
  while (my $seq = $fasta->next_seq) {
    $nseq++;
    my $label = "[$nseq] ".$seq->id;
    $fout1->write_seq($seq);
    if ($filter and my $match = is_control($nseq, $seq)) {
      msg($label, "- REMOVED ($match)");
      next;
    }
    else {
      my $new = trim_overhang($nseq, $seq);
      if ($new) {
        my $chopped = $seq->length - $new->length;
        msg($label, "- TRIMMED ($chopped bp)");
        $fout2->write_seq($new);
      }
      else {
        msg($label, "- UNCHANGED");
        $fout2->write_seq($seq);
      }
    }
  }
}

unless ($keepfiles) {
  for my $i (1 .. $nseq) {
    my(@patt) = ("$i.fa", "$i.head.fa", "$i.bls", "$i.ctl.bls");
    msg("Removing temporary files: @patt") if $debug;
    unlink @patt;
  }
}

close $log;
open LOG, "03.results.tab";
print while (<LOG>);
msg("Returning to original folder: $cwd");
chdir($cwd);
msg("Results in: $outdir");

# Say our goodbyes
my @motd = (
  "May all your replicons circularise.",
  "Publishing a genome with overhang is so embarassing. Lucky you used $EXE !",
  "Found a bug? Post it at $URL/issues",
  "Have a suggestion? Tell me at $URL/issues",
  "The $EXE manual is at $URL/blob/master/README.md",
  "Did you know? $EXE is a play on the concept of overhang vs hangover",
);
srand( $$ ); # seed
msg( $motd[ int(rand(scalar(@motd))) ] );
msg("Done.");

exit(0);

#----------------------------------------------------------------------
sub trim_overhang {
  my($id, $seq) = @_;
  my $len = int( min( $seq->length, $readlen) );
  msg("Using first $len bp to BLAST") if $debug;
  seq_to_fasta( "$id.fa", $seq );
  seq_to_fasta( "$id.head.fa", $seq->trunc(1, $len) );
  my $blastn_opt = "-evalue 1E-6 -dust no";
  run_cmd("blastn -query $id.head.fa -subject $id.fa -out $id.bls $blastn_opt");
  my $bls = Bio::SearchIO->new(-file=>"$id.bls", -format=>'blast');
  my $res = $bls->next_result or goto NOTRIM;
  my $hit = $res->next_hit or goto NOTRIM;
  my $self_hsp = $hit->next_hsp; # 1st HSP is always to itself

  while (my $hsp = $hit->next_hsp) {
    print_blast($res, $hit, $hsp, "TRIM") if $debug;
    if ($hsp->start('query') <= $fuzz
        and $hsp->end('subject') >= $hit->length - $fuzz
        and $hsp->strand('query') > 0
        and $hsp->strand('subject') > 0) {
      my $end =  $hsp->start('subject') - $hsp->start('query');
      my $rem = $hit->length - $end;
      msg($res->query_name,"keep 1..$end/".$hit->length, "(remove $rem bp)") if $debug;
      print $log join("\t", $res->query_name, 'trimmed', $hit->length, $end, $rem),"\n";
      my $fixed = $seq->trunc(1, $end);
      unless ($noanno) {
        my $desc = $seq->desc();
        $desc =~ s/\blen=(\d+)\b/len=$end/;
        $desc =~ s/\bsuggestCircular=no\b/suggestCircular=yes/;
        $desc =~ s/\bclass=contig\b/class=replicon/;
        $desc .= " circular=true overhang=$rem";
        $fixed->desc($desc);
      }
      return $fixed;
    }
  }
NOTRIM:
  print $log join("\t", $res->query_name, 'kept', $hit->length, $hit->length, 0),"\n";
  return;
}

#----------------------------------------------------------------------
sub is_control {
  my($id, $seq) = @_;
  seq_to_fasta( "$id.fa", $seq ) unless -r "$id.fa";  # created by trim_overhang
  my $blastn_opt = "-evalue 1E-6 -dust no";
  run_cmd("blastn -query '$APPDIR/db/controls.fna' -subject '$id.fa' -out '$id.ctl.bls' $blastn_opt");
  my $bls = Bio::SearchIO->new(-file=>"$id.ctl.bls", -format=>'blast');
  while (my $res = $bls->next_result) {
    while (my $hit = $res->next_hit) {
      while (my $hsp = $hit->next_hsp) {
        print_blast($res, $hit, $hsp, "FILTER[".$res->query_name."]") if $debug;
      }
      if ($hit->frac_aligned_query > 0.5) {
        print $log join("\t", $hit->name, 'removed', $hit->length, 0, 0),"\n";
        return $res->query_description;
      }
    }
  }
  return;
}

#----------------------------------------------------------------------
sub fix_start {
  my($id, $seq) = @_;
  seq_to_fasta( "$id.fa", $seq ) unless -r "$id.fa";  # created by trim_overhang
  my $blastn_opt = "-evalue 1E-6 -dust no";
  run_cmd("blastn -query '$APPDIR/db/controls.fna' -subject '$id.fa' -out '$id.ctl.bls' $blastn_opt");
  my $bls = Bio::SearchIO->new(-file=>"$id.ctl.bls", -format=>'blast');
  while (my $res = $bls->next_result) {
    while (my $hit = $res->next_hit) {
      while (my $hsp = $hit->next_hsp) {
        print_blast($res, $hit, $hsp, "FILTER[".$res->query_name."]") if $debug;
      }
      if ($hit->frac_aligned_query > 0.5) {
        print $log join("\t", $hit->name, 'removed', $hit->length, 0, 0),"\n";
        return $res->query_description;
      }
    }
  }
  return;
}

#----------------------------------------------------------------------
sub print_blast {
  my($res, $hit, $hsp, $label) = @_;
  $label ||= $hsp->algorithm;
  msg(
    "$label:", $hsp->start('query')."..".$hsp->end('query')."/".$res->query_length,
    "(".($hsp->strand('query') > 0 ? '+' : '-').")",
    "aligns to",
    $hsp->start('subject')."..".$hsp->end('subject')."/".$hit->length,
    "(".($hsp->strand('subject') > 0 ? '+' : '-').")",
    "at",
    sprintf("%.1f %%id", 100*$hsp->frac_identical('total') ),
  );
}

#----------------------------------------------------------------------
sub seq_to_fasta {
  my($fname, $seq) = @_;
  msg("Writing", $seq->id, "(", $seq->length, "bp ) to $fname") if $debug;
  my $out = Bio::SeqIO->new(-file=>">$fname", -format=>'fasta', -flush=>1);
  $out->write_seq($seq);
}

#----------------------------------------------------------------------
sub make_folder {
  my($outdir) = @_;
  if (-d $outdir) {
    $force ? msg("Will overwrite contents of --outdir $outdir as you asked.")
           : err("Folder '$outdir' already exists. Try using the --force")
           ;
  }
  make_path($outdir);
}

#----------------------------------------------------------------------
sub check_deps ($) {
  my($exit) = @_;
  msg("Checking dependencies of $EXE:") if $exit;
  # Check we have the required binaries
  for my $exe (@DEP_EXE) {
    my $fullexe = find_exe($exe);
    if ($fullexe) {
      msg("Using $exe - $fullexe");
    }
    else {
      err("Could not find '$exe' - please install it.");
    }
  }
  for my $fna (@DEP_FILE) {
    my $dbfile = "$APPDIR/db/$fna";
    -r $dbfile or err("Missing database file '$dbfile'");
    msg("Found database file $fna:", $dbfile);
  }

  if ($exit) {
    msg("Ok.");
    exit(0);
  }
}

#----------------------------------------------------------------------
sub run_test {
  my $outdir = tempdir()."/$EXE";
  my $cmd = "$0 --force --outdir $outdir \Q$APPDIR/test/test.fa\E";
  run_cmd($cmd);  # will die with errorcode if a problem
  for my $outfile (qw(01.input.fa 02.trimmed.fa 03.results.tab)) {
    -r "$outdir/$outfile" && -s _ or err("Could not see: $outfile");
  }
  msg("Test passed succesfully.");
  exit(0); 
}

#----------------------------------------------------------------------
sub run_cmd ($) {
  my($cmd) = @_;
  msg("Running: $cmd") if $debug;
  system($cmd)==0 or err("Error $? running command");
}

#----------------------------------------------------------------------
sub find_exe ($) {
  my($bin) = shift;
  for my $dir (File::Spec->path) {
    my $exe = File::Spec->catfile($dir, $bin);
    return $exe if -x $exe;
  }
  return;
}

#----------------------------------------------------------------------
sub msg {
  print STDERR "@_\n";
}

#----------------------------------------------------------------------
sub err {
  msg("ERROR:", @_);
  exit(1);
}

#----------------------------------------------------------------------
sub version {
  print "$EXE $VERSION\n";
  exit(0);
}

#----------------------------------------------------------------------
# Option setting routines

sub setOptions {
  use Getopt::Long;

  @Options = (
    {OPT=>"help",       VAR=>\&usage,     DESC=>"This help"},
    {OPT=>"debug!",     VAR=>\$debug,     DEFAULT=>0, DESC=>"Debug info"},
    {OPT=>"version!",   VAR=>\&version,   DESC=>"Print version and exit"},
    {OPT=>"check!",     VAR=>\$check,     DESC=>"Check dependencies and exit"},
    {OPT=>"test!",      VAR=>\&run_test,  DESC=>"Run a small test and exit"},
    {OPT=>"force!",     VAR=>\$force,     DEFAULT=>0, DESC=>"Force overwite of existing"},
    {OPT=>"outdir=s",   VAR=>\$outdir,    DEFAULT=>'', DESC=>"Output folder"},
    {OPT=>"readlen=i",  VAR=>\$readlen,   DEFAULT=>60_000, DESC=>"Approximate max read length"},
    {OPT=>"fuzz=i",     VAR=>\$fuzz,      DEFAULT=>5, DESC=>"Accept local alignment within --fuzz bp of global"},
    {OPT=>"keepfiles!", VAR=>\$keepfiles, DEFAULT=>0, DESC=>"Keep intermediate files"},
    {OPT=>"noanno!",    VAR=>\$noanno,    DEFAULT=>0, DESC=>"Don't annotate FASTA with circular=true"},
    {OPT=>"filter=s",   VAR=>\$filter,    DEFAULT=>"$APPDIR/db/controls.fna", DESC=>"Remove contigs matching these sequences"},
  );

  @ARGV or usage(1);

  &GetOptions(map {$_->{OPT}, $_->{VAR}} @Options) or usage(1);

  # Now setup default values.
  foreach (@Options) {
    if (defined($_->{DEFAULT}) && !defined(${$_->{VAR}})) {
      ${$_->{VAR}} = $_->{DEFAULT};
    }
  }
}

sub usage {
  my($exitcode) = @_;
  $exitcode = 0 if !defined($exitcode) or $exitcode eq 'help'; # what gets passed by getopt func
  select STDERR if $exitcode; # write to STDERR if exitcode is error

  print "SYNOPSIS\n  Filter, trim, circularise & orient long read assemblies\n";
  print "USAGE\n";
  print "  $EXE [options] canu.contigs.fasta [another.fasta ...]\n";
  print "OPTIONS\n";
  foreach (@Options) {
    my $opt = $_->{OPT};
    $opt =~ s/!$//;
    $opt =~ s/=s$/ [X]/;
    $opt =~ s/=i$/ [N]/;
    $opt =~ s/=f$/ [n.n]/;
    printf "  --%-13s %s%s.\n", $opt, $_->{DESC},
           defined($_->{DEFAULT}) ? " (default '$_->{DEFAULT}')" : "";
  }
  print "AUTHOR\n  $AUTHOR | $URL\n";
  exit($exitcode);
}

#----------------------------------------------------------------------
